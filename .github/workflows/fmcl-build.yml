name: Flame Launcher Build

on:
  push:
    branches:
      - main
    paths:
      - 'xmcl-runtime/**'
      - 'xmcl-runtime-api/**'
      - 'xmcl-keystone-ui/**'
      - 'xmcl-electron-app/**'
      - 'package.json'
  workflow_dispatch:
  
jobs:
  fmcl-build:
    runs-on: ${{ matrix.os }} 
    strategy:
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive
    - uses: pnpm/action-setup@v2.0.1
      with:
        version: 8.3.0
    - name: Fix node-gyp and Python
      run: python3 -m pip install packaging setuptools
    - name: Use Node.js 16
      uses: actions/setup-node@v2
      with:
        node-version: 16
        cache: 'pnpm'

    - name: Install
      run: pnpm install

    - name: Build all
      run: |
        pnpm run --prefix xmcl-keystone-ui build
        pnpm run --prefix xmcl-electron-app build:all
      env:
        BUILD_NUMBER: ${{ secrets.FMCL_VERSION }}
        NODE_OPTIONS: --max-old-space-size=32768
        NODE_ENV: production
        CURSEFORGE_API_KEY: ${{ secrets.CURSEFORGE_API_TOKEN }}

    - name: Fmcl-build-installer-x64
      if: ${{ runner.os == 'Windows' }}
      uses: Minionguyjpro/Inno-Setup-Action@v1.2.2
      with:
        path: src/flamelauncher-build-x64.iss
        options: /O+

    - name: Fmcl-build-installer-x32
      if: ${{ runner.os == 'Windows' }}
      uses: Minionguyjpro/Inno-Setup-Action@v1.2.2
      with:
        path: src/flamelauncher-build-x34.iss
        options: /O+
    
    - name: Upload Build
      uses: actions/upload-artifact@v3
      with:
        name: BUILD-${{ runner.os }}
        path: |
          xmcl-electron-app/build/output/

    - name: FMCL-x64-Upload-App-Windows
      if: ${{ runner.os == 'Windows' }}
      uses: actions/upload-artifact@v3
      with:
        name: FMCL-WINDOWS-x64-v${{ secrets.FMCL_VERSION }}-App
        path: src\output\Flame-Launcher.-v${{ secrets.FMCL_VERSION }}.-setup-x64.exe

    - name: FMCL-x32-Upload-App-Windows
      if: ${{ runner.os == 'Windows' }}
      uses: actions/upload-artifact@v3
      with:
        name: FMCL-WINDOWS-x32-v${{ secrets.FMCL_VERSION }}-App
        path: src\output\Flame-Launcher.-v${{ secrets.FMCL_VERSION }}.-setup-x32.exe

    - name: Upload Windows Archive x64
      if: ${{ runner.os == 'Windows' }}
      uses: actions/upload-artifact@v3
      with:
        name: FMCL-WINDOWS-x64-v${{ secrets.FMCL_VERSION }}-Archive
        path: |
          xmcl-electron-app/build/output/win-unpacked

    - name: Upload Windows Archive x32
      if: ${{ runner.os == 'Windows' }}
      uses: actions/upload-artifact@v3
      with:
        name: FMCL-WINDOWS-x32-v${{ secrets.FMCL_VERSION }}-Archive
        path: |
          xmcl-electron-app/build/output/win-ia32-unpacked

    - name: Upload Linux x64 Zip Build
      if: ${{ runner.os == 'Linux' }} 
      uses: actions/upload-artifact@v4
      with:
        name: linux-v${{ secrets.FMCL_VERSION }}-x64
        path: |
          xmcl-electron-app/build/output/linux-unpacked/
    - name: Upload Linux arm64 Zip Build
      if: ${{ runner.os == 'Linux' }} 
      uses: actions/upload-artifact@v4
      with:
        name: linux-v${{ secrets.FMCL_VERSION }}}-arm64
        path: |
          xmcl-electron-app/build/output/linux-arm64-unpacked/
    - name: Upload Mac x64 Zip Build
      if: ${{ runner.os == 'macOS' }} 
      uses: actions/upload-artifact@v4
      with:
        name: mac-v${{ secrets.FMCL_VERSION }}-x64
        path: |
          xmcl-electron-app/build/output/mac/
    - name: Upload Mac arm64 Zip Build
      if: ${{ runner.os == 'macOS' }} 
      uses: actions/upload-artifact@v4
      with:
        name: mac-v${{ secrets.FMCL_VERSION }}-arm64
        path: |
          xmcl-electron-app/build/output/mac-arm64/

  release:
    if: startsWith(github.event.head_commit.message, 'chore(release)')
    runs-on: ubuntu-latest
    needs: 
      - fmcl-build
      steps:

    - name: Create Github Release
      id: create-new-release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ secrets.FMCL_VERSION }}
        release_name: v${{ secrets.FMCL_VERSION }}
    
    - name: FMCL-x64-Upload-Archive to Github Windows
      id: upload-release-x64-archive-windows
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create-new-release.outputs.upload_url }}
        asset_path: xmcl-electron-app\build\output\fmcl-${{ secrets.FMCL_VERSION }}-win32-x64.zip
        asset_name: fmcl-${{ secrets.FMCL_VERSION }}-win32-x64.zip
        asset_content_type: application/zip
    
    - name: FMCL-x32-Upload to Github Windows
      id: upload-release-x32-archive-windows
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create-new-release.outputs.upload_url }}
        asset_path: xmcl-electron-app\build\output\fmcl-${{ secrets.FMCL_VERSION }}-win32-ia32.zip
        asset_name: fmcl-${{ secrets.FMCL_VERSION }}-win32-ia32.zip
        asset_content_type: application/zip

    - name: FMCL-x64-Upload to Github Linux
      id: upload-release-x64-app-linux
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create-new-release.outputs.upload_url }}
        asset_path: xmcl-electron-app\build\output\fmcl-${{ secrets.FMCL_VERSION }}-amd64.deb
        asset_name: fmcl-${{ secrets.FMCL_VERSION }}-amd64.deb
        asset_content_type: application/deb

    - name: FMCL-x32-Upload to Github Linux
      id: upload-release-x32-app-linux
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create-new-release.outputs.upload_url }}
        asset_path: xmcl-electron-app\build\output\fmcl-${{ secrets.FMCL_VERSION }}-arm64.deb
        asset_name: fmcl-${{ secrets.FMCL_VERSION }}-arm64.deb
        asset_content_type: application/deb

    - name: FMCL-Upload to Github Mac
      id: upload-release-app-mac
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create-new-release.outputs.upload_url }}
        asset_path: xmcl-electron-app\build\output\fmcl-${{ secrets.FMCL_VERSION }}.dmg
        asset_name: fmcl-${{ secrets.FMCL_VERSION }}.dmg
        asset_content_type: application/dmg
    
